{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","sortByOptions","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8dcd52d8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Business.css\";\n\nclass Business extends React.Component {\n  render() {\n    return (\n      <div className=\"Business\">\n        <div className=\"image-container\">\n          <img src={this.props.business.imageSrc} alt=\"\" />\n        </div>\n        <h2>{this.props.business.name}</h2>\n        <div className=\"Business-information\">\n          <div className=\"Business-address\">\n            <p>{this.props.business.address}</p>\n            <p>{this.props.business.city}</p>\n            <p>\n              {this.props.business.state} {this.props.business.zipCode}\n            </p>\n          </div>\n          <div className=\"Business-reviews\">\n            <h3>{this.props.business.category}</h3>\n            <h3 className=\"rating\">{this.props.business.rating}</h3>\n            <p>{this.props.business.reviewCount} reviews</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Business;\n","import React from \"react\";\nimport \"./BusinessList.css\";\nimport Business from \"../Business/Business\";\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n      //Here we take the array get the individual objects and map them to a Business component and pass the individual object to the component\n      <div className=\"BusinessList\">\n        {this.props.businesses.map(business => {\n          //Every list item rendered by a React component needs to have a unique key,\n          return <Business business={business} key={business.id} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default BusinessList;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nconst sortByOptions = {\n  \"Best Match\": \"best_match\",\n  \"Highest Rated\": \"rating\",\n  \"Most Reviewed\": \"review_count\"\n};\n\n//States have been created here and their handle functions\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    //The state object has three keys term, location, and sortby\n    this.state = {\n      term: \"\",\n      location: \"\",\n      sortBy: \"best_match\"\n    };\n\n    //Both of the functions located blow use this so we need to bing them to have acess to this\n    this.handleTermChange = this.handleTermChange.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  getSortByClass(sortByOption) {\n    if (sortByOption === this.state.sortBy) {\n      return \"active\";\n    }\n    return \"\";\n  }\n\n  handleSortByChange(sortByOption) {\n    this.setState({\n      sortBy: sortByOption\n    });\n  }\n\n  //Since both below will be related to events being triggered, both should accept event as an argument.\n  handleTermChange(event) {\n    this.setState({\n      term: event.target.value\n    });\n  }\n\n  handleLocationChange(event) {\n    this.setState({\n      location: event.target.value\n    });\n  }\n\n  handleSearch(event) {\n    //To acess passed down functions or values need to use props\n    this.props.searchYelp(\n      this.state.term,\n      this.state.location,\n      this.state.sortBy\n    );\n\n    //Anchor tags redirect meaning they restart app  change url remove this functionality.\n    event.preventDefault();\n  }\n\n  renderSortByOptions() {\n    return Object.keys(sortByOptions).map(sortByOption => {\n      let sortByOptionValue = sortByOptions[sortByOption];\n      return (\n        <li\n          key={sortByOptionValue}\n          className={this.getSortByClass(sortByOptionValue)}\n          //We bind handle sort by change because it uses this.setStat in order to use that it needs to be binded then send in the value to the function\n          onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n        >\n          {sortByOption}\n        </li>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <div className=\"SearchBar-sort-options\">\n          <ul>{this.renderSortByOptions()}</ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input\n            onChange={this.handleTermChange}\n            placeholder=\"Search Businesses\"\n          />\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\n        </div>\n        <div className=\"SearchBar-submit\">\n          <a onClick={this.handleSearch}>Let's Go</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","const apiKey = 'EZ-cDu0ArZnmgNfwFbZ4ZHk0tF3R8yZuH4Uk6lY080D22UaUT_ICgKScbU8CgLjaGduGFiQf-2ilS8pSM8824ShC3wQPWU3iyN2Zhaz9mRiAdbVyiYwUGYb_9vGjWnYx'\n\nconst Yelp = {\n  search(term, location, sortBy) {\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n      headers: {\n        Authorization: `Bearer ${apiKey}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (jsonResponse.businesses) {\n        return jsonResponse.businesses.map(business => {\n          return {\n          id: business.id,\n          imageSrc: business.image_url,\n          name: business.name,\n          address: business.location.address1,\n          city: business.location.city,\n          state: business.location.state,\n          zipCode: business.location.zip_code,\n          category: business.categories[0].title,\n          rating: business.rating,\n          reviewCount: business.review_count\n          }\n        })\n      }\n    })\n  }\n};\n\nexport default Yelp;","import React from \"react\";\nimport \"./App.css\";\n\nimport BusinessList from \"../BusinessList/BusinessList\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Yelp from \"../../util/Yelp\";\n\n/*\nconst business = {\n  imageSrc:\n    \"https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg\",\n  name: \"MarginOtto Pizzeria\",\n  address: \"1010 Paddington Way\",\n  city: \"Flavortown\",\n  state: \"NY\",\n  zipCode: \"10101\",\n  category: \"Italian\",\n  rating: 4.5,\n  reviewCount: 90\n};\n//This is an array of the objects above the array is passed to businesslist.js\nconst businesses = [business, business, business, business, business, business];\n*/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    //business is a key\n    this.state = {\n      businesses: []\n    };\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    //` not '\n    //console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`);\n\n    //Wehn we get our list of businesses we chain a then and set the state\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({ businesses: businesses });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}